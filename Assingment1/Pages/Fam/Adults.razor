@layout FamilyDetailed
@page "/Fam/{Id:int}"
@using Assingment1.Data
@using Models
@using Assingment1.Pages.Comp
@inject IFamiliesData FamiliesData
@if (AllAdults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!AllAdults.Any())
{
    <p>
        <em>No Adults exist in this Family. Please add some.</em>
    </p>
}
else
{
    <table class="table border-top-0">
        <thead class="border-top-0">
        <tr >
            <th class="border-top-0">First Name</th>
            <th class="border-top-0">Last Name</th>
            <th class="border-top-0">HairColor</th>
            <th class="border-top-0">EyeColor</th>
            <th class="border-top-0">Age</th>
            <th class="border-top-0">Weight</th>
            <th class="border-top-0">Height</th>
            <th class="border-top-0">Sex</th>
            <AuthorizeView>
                <Authorized>
                    <th class="border-top-0">Remove</th>
                </Authorized>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in AllAdults)
        {
            <tr>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age</td>
                <td>@adult.Weight</td>
                <td>@adult.Height</td>
                <td>@adult.Sex</td>
                <AuthorizeView>
                    <Authorized>
                        <td>
                            <button @onclick="@(() => RemoveAdult(@adult.FirstName))">
                                <i class="trashcan oi oi-trash" style="color: lightgray">
                                </i>
                            </button>
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}
<AuthorizeView>
    <Authorized>
    <div class="lg:w-1/12">
        <AddAdultComp Adults="AllAdults" Id="Id" StateChnaged="StateHasChanged"></AddAdultComp>
    </div>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public FamilyDetailed Layout { get; set; }

    private IList<Adult> AllAdults;

    protected override async Task OnInitializedAsync()
    {
        Layout.Id = Id;
        AllAdults = FamiliesData.GetFamilies().First(f => f.Id == Id).Adults;
        await Task.Delay(100);
    }

    private void RemoveAdult(string name)
    {
        FamiliesData.RemoveAdult(Id, name);
    }

}

