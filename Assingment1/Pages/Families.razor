@page "/Families"
@using Assingment1.Data
@using Models
@using Assingment1.Pages.Comp
@inject IFamiliesData FamiliesData
@inject NavigationManager NavManager
<div class="flex justify-center p-4">
    <div class="bg-white rounded-lg lg:w-10/12 p-4">
            <div class="py-4">
                <input class="bg-gray-100 p-2 rounded-lg border-0 " type="text" @oninput="@((arg) => FilterById(arg))" placeholder="Search by Family name"/>
            </div>        @if (AllFamilies == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!AllFamilies.Any())
        {
            <p>
                <em>No Families exist in the system. Please add some.</em>
            </p>
        }
        else
        {
            <table class="table border-top-0">
                <thead class="border-top-0">
                <tr >
                    <th>Family name</th>
                    <th>Adults</th>
                    <th>Children</th>
                    <th>Pets</th>
                    <th>StreetName</th>
                    <th>HouseNumber</th>
                    <AuthorizeView>
                        <Authorized>
                            <th>Remove</th>
                        </Authorized>
                    </AuthorizeView>

                </tr>
                </thead>
                <tbody>
                @foreach (var Fam in AllFamiliesToShow)
                {
                    <tr class="tableRow">
                        <td @onclick="@(() => NavManager.NavigateTo($"/Fam/{Fam.Id}"))">@Fam.GetFamilyName()</td>
                        <td @onclick="@(() => NavManager.NavigateTo($"/Fam/{Fam.Id}"))">
                            @Fam.Adults.Count
                        </td >
                        <td @onclick="@(() => NavManager.NavigateTo($"/Fam/{Fam.Id}"))">@Fam.Children.Count</td>
                        <td @onclick="@(() => NavManager.NavigateTo($"/Fam/{Fam.Id}"))">@Fam.Pets.Count</td>
                        <td @onclick="@(() => NavManager.NavigateTo($"/Fam/{Fam.Id}"))">@Fam.StreetName</td>
                        <td @onclick="@(() => NavManager.NavigateTo($"/Fam/{Fam.Id}"))">@Fam.HouseNumber</td>
                        <AuthorizeView>
                            <Authorized>
                                <td>
                                    <button @onclick="@(() => RemoveFamily(Fam.Id))">
                                        <i class="trashcan oi oi-trash" style="color: lightgray">
                                        </i>
                                    </button>
                                </td>
                            </Authorized>
                        </AuthorizeView>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code
{

    private IList<Family> AllFamilies;
    private IList<Family> AllFamiliesToShow;

    protected override async Task OnInitializedAsync()
    {
        AllFamilies = await FamiliesData.GetFamilies();
        AllFamiliesToShow = AllFamilies;
        await Task.Delay(100);
    }

    public void RemoveFamily(int id)
    {
        FamiliesData.RemoveFamily(id);
        Family toRemove = AllFamilies.First(t => t.Id == id);

        AllFamilies.Remove(toRemove);

        StateHasChanged();
    }
    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        Console.WriteLine(1);
        if (changeEventArgs.Value.ToString() != null)
        {
            Console.WriteLine(AllFamiliesToShow.Count);

            AllFamiliesToShow = AllFamilies.Where(f => f.FamilyName.StartsWith(changeEventArgs.Value.ToString())).ToList();
        }
        else
        {
            AllFamiliesToShow = AllFamilies;
        }
    }
}